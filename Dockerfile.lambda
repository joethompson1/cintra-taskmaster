# Build stage - use Debian-based Node.js image with more build tools included
FROM node:20-bookworm AS builder

# Set working directory
WORKDIR /app

# Install additional system dependencies needed for native modules (sharp, dd-trace, etc.)
RUN apt-get update && apt-get install -y \
    libvips-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy package files first (better Docker layer caching)
COPY package*.json ./

# Install ALL dependencies (including dev dependencies for building TypeScript)
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY tsconfig.json ./

# Build TypeScript to JavaScript
RUN npm run build

# Install only production dependencies in a clean directory
RUN mkdir /app-prod && cd /app-prod && \
    cp /app/package*.json ./ && \
    npm ci --omit=dev && \
    npm cache clean --force

# Runtime stage - use official AWS Lambda Node.js base image
FROM public.ecr.aws/lambda/nodejs:20

# Copy built application from builder stage
COPY --from=builder /app/dist ${LAMBDA_TASK_ROOT}/dist
COPY --from=builder /app/package*.json ${LAMBDA_TASK_ROOT}/

# Copy production dependencies from builder stage
COPY --from=builder /app-prod/node_modules ${LAMBDA_TASK_ROOT}/node_modules

# Install AWS Lambda Web Adapter
COPY --from=public.ecr.aws/awsguru/aws-lambda-adapter:0.8.3 /lambda-adapter /opt/extensions/lambda-adapter

# Install Datadog Lambda Extension
COPY --from=public.ecr.aws/datadog/lambda-extension:latest /opt/extensions/datadog-agent /opt/extensions/datadog-agent

# Set environment variables for Lambda Web Adapter
ENV AWS_LWA_ENABLE_COMPRESSION=true
ENV AWS_LWA_REMOVE_BASE_PATH=/
ENV PORT=8080
ENV NODE_ENV=production

# Datadog configuration environment variables
ENV DD_LAMBDA_HANDLER=index.handler
ENV DD_ENHANCED_METRICS=true

# Lambda Web Adapter will start your Express server and handle Lambda integration
CMD ["npm", "start"]