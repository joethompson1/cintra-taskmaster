version: 2.1

orbs:
  node: circleci/node@5.2.0
  docker: circleci/docker@2.6.0
  aws-cli: circleci/aws-cli@5.3.4
  aws-ecr: circleci/aws-ecr@9.5.1

executors:
  node:
    docker:
      - image: cimg/node:18.19.0
    resource_class: medium
    
  docker:
    docker:
      - image: cimg/base:stable
    resource_class: medium

parameters:
  deploy:
    type: boolean
    default: true

jobs:
  install-and-cache:
    executor: node
    steps:
      - checkout
      - restore_cache:
          name: Restore npm cache
          keys:
            - npm-cache-{{ checksum "package-lock.json" }}
            - npm-cache-
      - run:
          name: Install dependencies
          command: npm ci
      - save_cache:
          name: Save npm cache
          key: npm-cache-{{ checksum "package-lock.json" }}
          paths:
            - ~/.npm
      - persist_to_workspace:
          root: .
          paths:
            - .

  lint:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run ESLint
          command: npm run lint

  test:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run tests
          command: npm test
      - store_test_results:
          path: ./test-results
      - store_artifacts:
          path: ./coverage
          destination: coverage

  build-and-push-image:
    executor: docker
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true
      - aws-cli/setup:
          role_arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCIRole
          role_session_name: circleci-cintra-taskmaster
          session_duration: '1800'
      - aws-ecr/ecr_login
      - run:
          name: Build Docker image
          command: |
            docker build -t cintra-taskmaster:${CIRCLE_SHA1} .
            docker tag cintra-taskmaster:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cintra-taskmaster:${CIRCLE_SHA1}
            docker tag cintra-taskmaster:${CIRCLE_SHA1} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cintra-taskmaster:latest
      - run:
          name: Push Docker image to ECR
          command: |
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cintra-taskmaster:${CIRCLE_SHA1}
            docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/cintra-taskmaster:latest

  deploy-to-production:
    executor: docker
    steps:
      - attach_workspace:
          at: .
      - aws-cli/setup:
          role_arn: arn:aws:iam::${AWS_ACCOUNT_ID}:role/CircleCIRole
          role_session_name: circleci-cintra-taskmaster-deploy-prod
          session_duration: '1800'
      - run:
          name: Deploy to ECS Production
          command: |
            # Update ECS service with new image
            aws ecs update-service \
              --cluster cintra-taskmaster-production \
              --service cintra-taskmaster-service \
              --task-definition cintra-taskmaster-production \
              --force-new-deployment
            
            # Wait for deployment to complete
            aws ecs wait services-stable \
              --cluster cintra-taskmaster-production \
              --services cintra-taskmaster-service

workflows:
  build-test-deploy:
    jobs:
      - install-and-cache:
          context: aws-context
      
      - lint:
          context: aws-context
          requires:
            - install-and-cache
      
      - test:
          context: aws-context
          requires:
            - install-and-cache
      
      - build-and-push-image:
          context: aws-context
          requires:
            - lint
            - test
          filters:
            branches:
              only:
                - main
      
      - deploy-to-production:
          context: aws-context
          requires:
            - build-and-push-image
          filters:
            branches:
              only:
                - main
          when: << pipeline.parameters.deploy >> 